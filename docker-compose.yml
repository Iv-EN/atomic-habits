volumes:
  postgres_data:
  static:
  media:

networks:
  atomic_habits_network:
    driver: bridge

services:
  db:
    container_name: ah_db
    networks:
      - atomic_habits_network
    image: postgres:16
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: ah_backend
    networks:
      - atomic_habits_network
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    command: sh -c "python manage.py migrate &&\
                    python manage.py collectstatic --noinput &&\
                    gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static:/app/staticfiles
      - media:/app/media/
#    ports:
#      - 8000:8000
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - db
      - redis


  redis:
    container_name: ah_redis
    networks:
      - atomic_habits_network
    image: redis:7
    restart: always

  celery:
    container_name: ah_celery
    networks:
      - atomic_habits_network
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - backend
    command: >
      celery -A config worker -l INFO ${CELERY_OPTIONS}
    restart: always

  celery_beat:
    container_name: ah_celery_beat
    networks:
      - atomic_habits_network
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - backend
    command: celery -A config beat -l INFO
    restart: always

  nginx:
    container_name: ah_proxy
    networks:
      - atomic_habits_network
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 8000:80
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - static:/app/staticfiles
      - media:/app/media
    environment:
      - BACKEND_HOST=backend
      - BACKEND_PORT=8000
    depends_on:
      - backend